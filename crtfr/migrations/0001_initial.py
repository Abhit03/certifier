# Generated by Django 2.1.7 on 2019-02-27 16:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('oms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BadReason',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PixelProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RunReconstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reconstruction', models.CharField(choices=[('online', 'Online'), ('express', 'Express'), ('prompt', 'Prompt'), ('rereco', 'ReReco')], max_length=3)),
                ('dataset', models.CharField(max_length=150)),
                ('is_reference', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='StripProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TrackingProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='RunCertification',
            fields=[
                ('runreconstruction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='crtfr.RunReconstruction')),
                ('pixel', models.CharField(choices=[('bad', 'Bad'), ('good', 'Good'), ('excluded', 'Excluded')], max_length=3)),
                ('strip', models.CharField(choices=[('bad', 'Bad'), ('good', 'Good'), ('excluded', 'Excluded')], max_length=3)),
                ('tracking', models.CharField(choices=[('bad', 'Bad'), ('good', 'Good'), ('excluded', 'Excluded')], max_length=3)),
                ('pixel_lowstat', models.BooleanField(default=False)),
                ('strip_lowstat', models.BooleanField(default=False)),
                ('tracking_lowstat', models.BooleanField(default=False)),
                ('comment', models.TextField()),
                ('bad_reason', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='crtfr.BadReason')),
                ('pixel_problems', models.ManyToManyField(blank=True, to='crtfr.PixelProblem')),
            ],
        ),
        migrations.AddField(
            model_name='runreconstruction',
            name='run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='oms.OmsRun'),
        ),
        migrations.AlterUniqueTogether(
            name='runreconstruction',
            unique_together={('run', 'reconstruction')},
        ),
        migrations.AddField(
            model_name='runcertification',
            name='reference_runrunreconstruction',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='crtfr.RunReconstruction'),
        ),
        migrations.AddField(
            model_name='runcertification',
            name='strip_problems',
            field=models.ManyToManyField(blank=True, to='crtfr.StripProblem'),
        ),
        migrations.AddField(
            model_name='runcertification',
            name='tracking_problems',
            field=models.ManyToManyField(blank=True, to='crtfr.TrackingProblem'),
        ),
    ]
